// HashTable.cpp -- function definitions for a hash table using chainingtemplate <class DataType>HashTable<DataType>::HashTable( int (*hf)(const DataType &), int s )	: table( s ){	hashfunc = hf;}template <class DataType>bool HashTable<DataType>::insert( const DataType & newObject ){	int location = hashfunc( newObject );	if ( location < 0 || location >= table.length( ) )		return false;	table[ location ].insert( newObject ); 	return true;}template <class DataType>bool HashTable<DataType>::retrieve( DataType & retrieved ){	int location = hashfunc( retrieved );	if ( location < 0 || location >= table.length( ) )		return false;	if ( !table[ location ].retrieve( retrieved ) )		return false;	return true;}template <class DataType>bool HashTable<DataType>::remove( DataType & removed ){	int location = hashfunc( removed );	if ( location < 0 || location >= table.length( ) )		return false;	if ( !table[ location ].remove( removed ) )		return false;	return true;}template <class DataType>bool HashTable<DataType>::update( DataType & updateObject ){	int location = hashfunc( updateObject );	if ( location < 0 || location >= table.length( ) )		return false;	if ( !table[location].find( updateObject ) )		return false;	table[location].replace( updateObject );	return true;}template <class DataType>void HashTable<DataType>::makeEmpty( ){	for ( int i = 0; i < table.length( ); i++ )		table[ i ].makeEmpty( );}