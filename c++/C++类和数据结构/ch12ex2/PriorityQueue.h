// PriorityQueue.h -- implementation of a priority queue with a linked (embedded) heap#include "Array.h"template <class DataType>struct PQNode {    DataType info;    PQNode<DataType> *left;    PQNode<DataType> *right;    PQNode<DataType> *parent;    PQNode<DataType> *back;    PQNode<DataType> *next;};// if a struct is used as DataType //		operator > must be overloaded for comparing two elements of DataType// if a PriorityQueue is constructed passing in an Array object, the length function of the//		Array object must return exactly the number of elements to be put in the heap//		(use the changeSize function if necessary)// The constructors, the enqueue function, the copy constructor, and the overloaded// the assignment operator can cause an exception to be thrown if out of heap memorytemplate <class DataType>class PriorityQueue{public:    PriorityQueue( );    PriorityQueue( Array<DataType> & arr );	PriorityQueue( const PriorityQueue<DataType> & appq );	~PriorityQueue( );	PriorityQueue<DataType> & operator =( const PriorityQueue<DataType> & rpq );    void enqueue( const DataType & newElement );    bool dequeue( DataType & deqElement );    bool isEmpty();    void makeEmpty();private:	PQNode<DataType> rootHeader;    PQNode<DataType> *root;    PQNode<DataType> *last;    PQNode<DataType> *lastParent;    bool left;	inline void insertNode( const DataType & inf );    inline void heapify( PQNode<DataType> *current );	inline void deepCopy( const PriorityQueue<DataType> & original );};#include "PriorityQueue.cpp"