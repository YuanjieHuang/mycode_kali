// checkbook.h ö a class template for a Checkbook, where the check is any data type// to use a struct for the DataType, you must overload the following operators://	>	left operand:  struct object	right operand:  float//		used to compare the amount of the check in the struct object with the //		balance//	-=	left operand:  float		right operand:  struct object//		used to subtract the amount of the check in the struct object from the//		balanceconst int CAPACITY = 5;// The templates for an associated CheckInfo and Checkbook must match in DataType template <class DataType>struct CheckInfo {	int numChecks;	DataType checks[ CAPACITY ];};template <class DataType>class Checkbook{public:	Checkbook( );	Checkbook( float initBalance );	void setBalance( float amount );	bool writeCheck( const DataType & amount );  // returns false if amount is greater than balance; 										 // otherwise returns true	void deposit( float amount );	float getBalance(  ) const;	DataType getLastCheck( ) const;	// getLastChecks returns up to CAPACITY checks in a CheckInfo struct	// the number of checks is also in the CheckInfo struct	// checks in the checks array are stored in order with the latest check first	CheckInfo<DataType> getLastChecks(  ) const;  		float getLastDeposit( ) const; private:	float balance;	int numChecks;  // the number of checks stored in the array	int lastIndex;  // the index of the last check that was written	DataType lastChecks[ CAPACITY ];  // saves up to CAPACITY checks	float lastDeposit;};#include "checkbook.cpp"