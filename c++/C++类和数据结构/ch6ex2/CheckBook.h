// CheckBook.h ö a class template for a CheckBook, where the check is any data type// The constructor and the writeCheck function can throw exceptions if// out of heap memory.// to use a struct for the DataType, you must overload the following operators://	>	left operand:  struct object	right operand:  float//		used to compare the amount of the check in the struct object with the //		balance//	-=	left operand:  float		right operand:  struct object//		used to subtract the amount of the check in the struct object from the//		balance#include "Array.h"template <class DataType>class CheckBook{public:	CheckBook( float initBalance );	bool writeCheck( const DataType & amount );  // returns false if amount is greater  										 // than balance; otherwise returns true	void deposit( float amount );	float getBalance(  ) const;	Array<DataType> getChecks( );  		float getLastDeposit( ) const; protected:	float balance;private:	int lastIndex;  // the index of the last check that was written	Array<DataType> checks;  	float lastDeposit;};#include "CheckBook.cpp"