const int LOW_END=10;   // low end of incomesconst int HIGH_END=100; // high end of incomesconst int TABLE_SIZE = HIGH_END - LOW_END + 1;typedef int TableType[TABLE_SIZE];int index(int group)// Returns the array index that corresponds to group number.{   return group - LOW_END;}  // end indexvoid readData(TableType incomeData)// ---------------------------------------------------------// Reads and organizes income statistics.// Precondition: The calling module gives directions and// prompts user. Input data is error-free and each input// line is in the form G N, where N is the number of// people with an income in the G-thousand-dollar group// and LOW_END <= G <= HIGH_END. An input line with values// of zero for both G and N terminates the input.// Postcondition: incomeData[G-LOW_END] = total number of// people with an income in the G-thousand-dollar group for// each G read. The values read are displayed.// ---------------------------------------------------------{   int group, number; // input values   // clear array   for (group = LOW_END; group <= HIGH_END; ++group)      incomeData[index(group)] = 0;   for (cin >> group >> number;        (group != 0) || (number != 0);        cin >> group >> number)   {  // Invariant: group and number are not both 0      cout << "Income group " << group << " contains "           << number << " people.\n";      incomeData[index(group)] += number;   }  // end for}  // end readData