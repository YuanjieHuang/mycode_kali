// ********************************************************// Implementation file QueueL.cpp for the ADT queue.// ADT list implementation.// ********************************************************#include "QueueL.h"  // header fileQueue::Queue(){}  // end default constructorQueue::Queue(const Queue& Q): aList(Q.aList){}  // end copy constructorQueue::~Queue(){}  // end destructorbool Queue::isEmpty() const{   return (aList.getLength() == 0);}  // end isEmptyvoid Queue::enqueue(QueueItemType newItem) throw(QueueException){   try   {      aList.insert(aList.getLength()+1, newItem);   } // end try   catch (ListException e)   {      throw QueueException("QueueException: cannot enqueue item");   } // end catch}  // end enqueuevoid Queue::dequeue() throw(QueueException){   if (aList.isEmpty())      throw QueueException("QueueException: empty queue, cannot dequeue");   else      aList.remove(1);}  // end dequeuevoid Queue::dequeue(QueueItemType& queueFront) throw(QueueException){   if (aList.isEmpty())      throw QueueException("QueueException: empty queue, cannot dequeue");   else   {      aList.retrieve(1, queueFront);      aList.remove(1);   } // end if}  // end dequeuevoid Queue::getFront(QueueItemType& queueFront) const                      throw(QueueException){   if (!aList.isEmpty())      throw QueueException("QueueException: empty queue, cannot getFront");   else      aList.retrieve(1, queueFront);}  // end getFront// End of implementation file.