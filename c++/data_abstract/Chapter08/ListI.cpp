#include "ListI.h"// incomplete implementation here, needs constructor, // destructor and member functions// isEmpty, getLength, findPrev, and removeListIterator List:: begin() const{   ListIterator iter(this, head);   return iter;}  // end beginListIterator List::end() const{   ListIterator iter(this, NULL);   return iter;}  // end endListIterator List::insert(ListIterator iter,                           ListItemType newItem)                    throw(ListException){ // Make sure iterator references this list   if ((iter.container == this))   {  // create new node and place NewItem in it      ListNode *newPtr = new ListNode(newItem, NULL);      size++;      // attach new node to list      if (iter == begin())      {  // insert new node at beginning of list         newPtr->next = head;         head = newPtr;      }      else      {  ListNode *prev = findPrev(iter);         // insert new node before node          // to which iter references         newPtr->next = prev->next;         prev->next = newPtr;      }  // end if            return ListIterator(this, newPtr);   }   else      throw ListException("ListException: insert has bad iterator value");} // end insert