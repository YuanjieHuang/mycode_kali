template <class Key, class T, class Compare = less<Key>>class map{public:  explicit map(const Compare& cmp = Compare());  // Default constructor  // Precondition: None.  // Postcondition: The map object is initialized to be empty.  // The default comparison operator is <.   // A comparison function object may be supplied.    template <class InputIter> 			       map(InputIter first, InputIter last,       const Compare& comp = Compare());	                                        // Constructor: map is initialized with length last Ð first    // and filled with all values from the dereferenced.   // input iterators on the range [first, last].   // Precondition: None.   // Postcondition: The map contains input iterators in the   // range [first, last].  If a function comp is supplied, it   // is used to compare elements of the map.    bool empty() const;   // Determines whether the map is empty.   // Precondition: None.   // Postcondition: Returns true if the map is empty,   // otherwise returns false.   size_type size() const;   // Determines the size of the map.   // The return type size_type is an integral type.    // Precondition: None.   // Postcondition: Returns the number of items that   // are currently in the map.   size_type max_size() const;   // Determines the maximum number of elements   // the map can hold.   // Precondition: None.   // Postcondition: Returns the maximum number of elements.   Iter insert(Iter i, const value_type& e);	   // Inserts element pair e into the map if a value_type    // with the same key is not already present in the map.   // Takes an optional iterator parameter as a hint as to where     // to insert.                                    // Precondition: The iterator is initialized.   // Postcondition: Element e has been inserted into the map and   // an iterator to e is returned.       Iter erase(Iter i)   // Removes the map element pointed to by iterator i.   // Precondition: None.   // Postcondition: Returns an iterator pointing to the map   // element following the removed pair.   // If the pair was the last element, the value returned    // by end() was returned.   void erase(Iter first, Iter last);   // Removes all map elements in the range (first, last).   // Precondition: None.   // Postcondition: The map has no elements in the range   // [first, last].    Iter find(const key_value& e) const;   // Returns an iterator that points to the element   // equal to e.    // Precondition: None.   // Postcondition: If element e was in the map, an iterator   // that points to e was returned; otherwise, the value   // returned by end() was returned.                  size_type count(const key_type& k);   // Returns number of elements equal to k.    // Precondition: None.   // Postcondition: Returns the number of elements equal to k.   // Since a map has unique keys, count will always return 1 or   // 0.         Iter lower_bound(const key_type& k) const;   // Returns an iterator that points to the first key    // that is equal to or greater than k.    // Precondition: None.   // Postcondition: Returns the comparison function object   // for the set.    Iter upper_bound(const key_type& k) const;   // Returns an iterator that points to the first key    // that is greater than e.   // Precondition: None.   // Postcondition: Returns the comparison function object   // for the set.    void swap(map<Key, T, Compare>& m);   // Exchanges maps.    // Precondition: None.   // Postcondition: Exchanges the contents of the map m   // with the current map, *this.    Iter begin();   // Returns an iterator to the first element in the   // map.   // Precondition: None.   // Postcondition: If the map was empty,   // the value returned by end() was returned.    Iter end();   // Returns an iterator to test for the end of the   // map.   // Precondition: None.   // Postcondition: The value for the end of the map was   // returned.}  // end STL map 